// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: grpc/proto.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChitChatService_Publish_FullMethodName   = "/ChitChatService/Publish"
	ChitChatService_Subscribe_FullMethodName = "/ChitChatService/Subscribe"
)

// ChitChatServiceClient is the client API for ChitChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service
type ChitChatServiceClient interface {
	// Endpoint: Publish
	Publish(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*Empty, error)
	// Endpoint: BroadCast the published message
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageRequest], error)
}

type chitChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChitChatServiceClient(cc grpc.ClientConnInterface) ChitChatServiceClient {
	return &chitChatServiceClient{cc}
}

func (c *chitChatServiceClient) Publish(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ChitChatService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chitChatServiceClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChitChatService_ServiceDesc.Streams[0], ChitChatService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, MessageRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChitChatService_SubscribeClient = grpc.ServerStreamingClient[MessageRequest]

// ChitChatServiceServer is the server API for ChitChatService service.
// All implementations must embed UnimplementedChitChatServiceServer
// for forward compatibility.
//
// Define the service
type ChitChatServiceServer interface {
	// Endpoint: Publish
	Publish(context.Context, *MessageRequest) (*Empty, error)
	// Endpoint: BroadCast the published message
	Subscribe(*Empty, grpc.ServerStreamingServer[MessageRequest]) error
	mustEmbedUnimplementedChitChatServiceServer()
}

// UnimplementedChitChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChitChatServiceServer struct{}

func (UnimplementedChitChatServiceServer) Publish(context.Context, *MessageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedChitChatServiceServer) Subscribe(*Empty, grpc.ServerStreamingServer[MessageRequest]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedChitChatServiceServer) mustEmbedUnimplementedChitChatServiceServer() {}
func (UnimplementedChitChatServiceServer) testEmbeddedByValue()                         {}

// UnsafeChitChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChitChatServiceServer will
// result in compilation errors.
type UnsafeChitChatServiceServer interface {
	mustEmbedUnimplementedChitChatServiceServer()
}

func RegisterChitChatServiceServer(s grpc.ServiceRegistrar, srv ChitChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChitChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChitChatService_ServiceDesc, srv)
}

func _ChitChatService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChatService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServiceServer).Publish(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChitChatService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChitChatServiceServer).Subscribe(m, &grpc.GenericServerStream[Empty, MessageRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChitChatService_SubscribeServer = grpc.ServerStreamingServer[MessageRequest]

// ChitChatService_ServiceDesc is the grpc.ServiceDesc for ChitChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChitChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChitChatService",
	HandlerType: (*ChitChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ChitChatService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ChitChatService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
